#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_TonkPumpDefaultWallet.headers.fc";
#include "tact_TonkPumpDefaultWallet.stdlib.fc";
#include "tact_TonkPumpDefaultWallet.storage.fc";

;;
;; Contract TonkPumpDefaultWallet functions
;;

(int, slice, slice) $TonkPumpDefaultWallet$_contract_init(slice $master, slice $owner) impure inline_ref {
    var (($self'balance, $self'owner, $self'master)) = (null(), null(), null());
    $self'balance = 0;
    $self'owner = $owner;
    $self'master = $master;
    return ($self'balance, $self'owner, $self'master);
}

((int, slice, slice), int) $TonkPumpDefaultWallet$_fun_msgValue((int, slice, slice) $self, int $value) impure inline_ref {
    var (($self'balance, $self'owner, $self'master)) = $self;
    int $msgValue = $value;
    int $tonBalanceBeforeMsg = (__tact_my_balance() - $msgValue);
    int $storageFee = (10000000 - min($tonBalanceBeforeMsg, 10000000));
    $msgValue = ($msgValue - ($storageFee + 10000000));
    return (($self'balance, $self'owner, $self'master), $msgValue);
}

((int, slice, slice), (int, slice, slice, cell)) $TonkPumpDefaultWallet$_fun_get_wallet_data((int, slice, slice) $self) impure inline_ref {
    var (($self'balance, $self'owner, $self'master)) = $self;
    return (($self'balance, $self'owner, $self'master), $JettonWalletData$_constructor_balance_owner_master_walletCode($self'balance, $self'owner, $self'master, $StateInit$_get_code($TonkPumpDefaultWallet$_init_child(__tact_context_sys, $self'master, $self'owner))));
}

;;
;; Receivers of a Contract TonkPumpDefaultWallet
;;

(((int, slice, slice)), ()) $TonkPumpDefaultWallet$_internal_binary_TokenTransfer((int, slice, slice) $self, (int, int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($msg'queryId, $msg'amount, $msg'destination, $msg'response_destination, $msg'custom_payload, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(4429, ( __tact_slice_eq_bits($self'owner, $ctx'sender) ));
    int $fwdFee = ($Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)) + $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw)));
    int $final = (30000000 + $fwdFee);
    throw_unless(4159, ($ctx'value > min($final, 10000000)));
    $self'balance = ($self'balance - $msg'amount);
    throw_unless(62972, ($self'balance >= 0));
    var ($init'code, $init'data) = $TonkPumpDefaultWallet$_init_child(__tact_context_sys, $self'master, $msg'destination);
    slice $walletAddress = $global_contractAddress(($init'code, $init'data));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body_code_data($walletAddress, 0, 64, false, $TokenTransferInternal$_store_cell($TokenTransferInternal$_constructor_queryId_amount_from_response_destination_forward_ton_amount_forward_payload($msg'queryId, $msg'amount, $self'owner, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload)), $init'code, $init'data));
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TonkPumpDefaultWallet$_internal_binary_TokenTransferInternal((int, slice, slice) $self, (int, int, slice, slice, int, slice) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($msg'queryId, $msg'amount, $msg'from, $msg'response_destination, $msg'forward_ton_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    if (( ~ __tact_slice_eq_bits($self'master, $ctx'sender) )) {
        var ($sinit'code, $sinit'data) = $TonkPumpDefaultWallet$_init_child(__tact_context_sys, $self'master, $msg'from);
        throw_unless(42708, ( __tact_slice_eq_bits($ctx'sender, $global_contractAddress(($sinit'code, $sinit'data))) ));
    }
    $self'balance = ($self'balance + $msg'amount);
    throw_unless(62972, ($self'balance >= 0));
    int $msgValue = ($self'balance, $self'owner, $self'master)~$TonkPumpDefaultWallet$_fun_msgValue($ctx'value);
    int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw));
    $msgValue = (($msgValue - $msg'forward_ton_amount) - $fwdFee);
    if (($msg'forward_ton_amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'owner, $msg'forward_ton_amount, 3, false, $TokenNotification$_store_cell($TokenNotification$_constructor_queryId_amount_from_forward_payload($msg'queryId, $msg'amount, $msg'from, $msg'forward_payload))));
    }
    if ((~ null?($msg'response_destination))) {
        $global_send($SendParameters$_constructor_to_value_bounce_body_mode($msg'response_destination, $msgValue, false, $TokenExcesses$_store_cell($TokenExcesses$_constructor_queryId($msg'queryId)), 2));
    }
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TonkPumpDefaultWallet$_internal_binary_TokenBurn((int, slice, slice) $self, (int, int, slice, slice) $msg) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($msg'queryId, $msg'amount, $msg'owner, $msg'response_destination) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    $self'balance = ($self'balance - $msg'amount);
    throw_unless(62972, ($self'balance >= 0));
    int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw));
    throw_unless(43422, ($ctx'value > (($fwdFee + 20000000) + 10000000)));
    $global_send($SendParameters$_constructor_to_value_mode_bounce_body($self'master, 0, 64, true, $TokenBurnNotification$_store_cell($TokenBurnNotification$_constructor_queryId_amount_owner_response_destination($msg'queryId, $msg'amount, $self'owner, $self'owner))));
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TonkPumpDefaultWallet$_receive_binary_bounce_TokenTransferInternal((int, slice, slice) $self, (int, int) $src) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($src'queryId, $src'amount) = $src;
    $self'balance = ($self'balance + $src'amount);
    return (($self'balance, $self'owner, $self'master), ());
}

(((int, slice, slice)), ()) $TonkPumpDefaultWallet$_receive_binary_bounce_TokenBurnNotification((int, slice, slice) $self, (int, int) $src) impure inline {
    var ($self'balance, $self'owner, $self'master) = $self;
    var ($src'queryId, $src'amount) = $src;
    $self'balance = ($self'balance + $src'amount);
    return (($self'balance, $self'owner, $self'master), ());
}

;;
;; Get methods of a Contract TonkPumpDefaultWallet
;;

_ %msgValue(int $$value) method_id(115218) {
    int $value = $$value;
    var self = $TonkPumpDefaultWallet$_contract_load();
    var res = self~$TonkPumpDefaultWallet$_fun_msgValue($value);
    return res;
}

_ %get_wallet_data() method_id(97026) {
    var self = $TonkPumpDefaultWallet$_contract_load();
    var res = self~$TonkPumpDefaultWallet$_fun_get_wallet_data();
    return $JettonWalletData$_to_external(res);
}

_ supported_interfaces() method_id {
    return (
        "org.ton.introspection.v0"H >> 128,
        "org.ton.abi.ipfs.v0"H >> 128,
        "org.ton.deploy.lazy.v0"H >> 128,
        "org.ton.debug.v0"H >> 128,
        "org.ton.chain.workchain.v0"H >> 128,
        "org.ton.jetton.wallet"H >> 128
    );
}

_ get_abi_ipfs() method_id {
    return "ipfs://QmaVAWnKg51kbNviP1FDGVtC7cGHbu2qE6zHS4pCGYmrbK";
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract TonkPumpDefaultWallet
;;

((int, slice, slice), int) $TonkPumpDefaultWallet$_contract_router_internal((int, slice, slice) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        
        ;; Skip 0xFFFFFFFF
        in_msg~skip_bits(32);
        
        ;; Parse op
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg.preload_uint(32);
        }
        
        ;; Bounced handler for TokenTransferInternal message
        if (op == 395134233) {
            var msg = in_msg~$TokenTransferInternal$_load_bounced();
            self~$TonkPumpDefaultWallet$_receive_binary_bounce_TokenTransferInternal(msg);
            return (self, true);
        }
        
        ;; Bounced handler for TokenBurnNotification message
        if (op == 2078119902) {
            var msg = in_msg~$TokenBurnNotification$_load_bounced();
            self~$TonkPumpDefaultWallet$_receive_binary_bounce_TokenBurnNotification(msg);
            return (self, true);
        }
        
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive TokenTransfer message
    if (op == 260734629) {
        var msg = in_msg~$TokenTransfer$_load();
        self~$TonkPumpDefaultWallet$_internal_binary_TokenTransfer(msg);
        return (self, true);
    }
    
    ;; Receive TokenTransferInternal message
    if (op == 395134233) {
        var msg = in_msg~$TokenTransferInternal$_load();
        self~$TonkPumpDefaultWallet$_internal_binary_TokenTransferInternal(msg);
        return (self, true);
    }
    
    ;; Receive TokenBurn message
    if (op == 1499400124) {
        var msg = in_msg~$TokenBurn$_load();
        self~$TonkPumpDefaultWallet$_internal_binary_TokenBurn(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $TonkPumpDefaultWallet$_contract_load();
    
    ;; Handle operation
    int handled = self~$TonkPumpDefaultWallet$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $TonkPumpDefaultWallet$_contract_store(self);
}
