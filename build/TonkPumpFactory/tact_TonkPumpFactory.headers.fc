;;
;; Header files for TonkPumpFactory
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_dict_set_int_cell
(cell, ()) __tact_dict_set_int_cell(cell d, int kl, int k, cell v) inline;

;; __tact_dict_get_int_cell
cell __tact_dict_get_int_cell(cell d, int kl, int k) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $ChangeOwner$_load
(slice, ((int, slice))) $ChangeOwner$_load(slice sc_0) inline;

;; $ChangeOwnerOk$_store
builder $ChangeOwnerOk$_store(builder build_0, (int, slice) v) inline;

;; $ChangeOwnerOk$_store_cell
cell $ChangeOwnerOk$_store_cell((int, slice) v) inline;

;; $DeployContractAndAMM$_load
(slice, ((cell, slice, int))) $DeployContractAndAMM$_load(slice sc_0) inline;

;; $SafeWithdraw$_load
(slice, ((int))) $SafeWithdraw$_load(slice sc_0) inline;

;; $DeployedPair$_store
builder $DeployedPair$_store(builder build_0, (slice, slice) v) inline;

;; $DeployedPair$_store_cell
cell $DeployedPair$_store_cell((slice, slice) v) inline;

;; $DeployedPair$_load
(slice, ((slice, slice))) $DeployedPair$_load(slice sc_0) inline;

;; $DeployedPair$_as_optional
tuple $DeployedPair$_as_optional((slice, slice) v) inline;

;; $DeployedPair$_load_opt
tuple $DeployedPair$_load_opt(cell cl) inline;

;; $TonkPumpFactory$_store
builder $TonkPumpFactory$_store(builder build_0, (int, int, slice, int, int, cell) v) inline;

;; $TonkPumpFactory$_load
(slice, ((int, int, slice, int, int, cell))) $TonkPumpFactory$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $DeployedPair$_get_jettonAddress
_ $DeployedPair$_get_jettonAddress((slice, slice) v) inline;

;; $DeployedPair$_get_ammAddress
_ $DeployedPair$_get_ammAddress((slice, slice) v) inline;

;; $DeployedPair$_not_null
((slice, slice)) $DeployedPair$_not_null(tuple v) inline;

;; $TonkPumpJetton$init$_store
builder $TonkPumpJetton$init$_store(builder build_0, (slice, slice, cell, int) v) inline;

;; $TonkPumpAMM$init$_store
builder $TonkPumpAMM$init$_store(builder build_0, (int, slice, slice, slice, slice, int) v) inline;

;; $TonkPumpFactory$init$_load
(slice, ((int))) $TonkPumpFactory$init$_load(slice sc_0) inline;

;; $TonkPumpFactory$_contract_init
(int, int, slice, int, int, cell) $TonkPumpFactory$_contract_init(int $id) impure inline_ref;

;; $TonkPumpFactory$_contract_load
(int, int, slice, int, int, cell) $TonkPumpFactory$_contract_load() impure inline_ref;

;; $TonkPumpFactory$_contract_store
() $TonkPumpFactory$_contract_store((int, int, slice, int, int, cell) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $TonkPumpJetton$_init_child
(cell, cell) $TonkPumpJetton$_init_child(cell sys', slice $owner, slice $_dev, cell $content, int $_minter) inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $TonkPumpAMM$_init_child
(cell, cell) $TonkPumpAMM$_init_child(cell sys', int $_id, slice $_owner, slice $_dev, slice $_jettonAddress, slice $_ticker, int $v) inline_ref;

;; $TonkPumpFactory$_fun_jettonAddress
((int, int, slice, int, int, cell), slice) $TonkPumpFactory$_fun_jettonAddress((int, int, slice, int, int, cell) $self, int $tokenId) impure inline_ref;

;; $TonkPumpFactory$_fun_ammContractAddress
((int, int, slice, int, int, cell), slice) $TonkPumpFactory$_fun_ammContractAddress((int, int, slice, int, int, cell) $self, int $tokenId) impure inline_ref;

;; $TonkPumpFactory$_fun_allContracts
((int, int, slice, int, int, cell), int) $TonkPumpFactory$_fun_allContracts((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_deployFee
((int, int, slice, int, int, cell), int) $TonkPumpFactory$_fun_deployFee((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_myAddress
((int, int, slice, int, int, cell), slice) $TonkPumpFactory$_fun_myAddress((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_id
((int, int, slice, int, int, cell), int) $TonkPumpFactory$_fun_id((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_balance
((int, int, slice, int, int, cell), int) $TonkPumpFactory$_fun_balance((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_code_data(slice to, int value, int mode, cell code, cell data) inline;

;; $DeployedPair$_constructor_jettonAddress_ammAddress
((slice, slice)) $DeployedPair$_constructor_jettonAddress_ammAddress(slice jettonAddress, slice ammAddress) inline;

;; $TonkPumpFactory$_fun_deployJettonAndAMM
((int, int, slice, int, int, cell), ()) $TonkPumpFactory$_fun_deployJettonAndAMM((int, int, slice, int, int, cell) $self, (cell, slice, int) $msg) impure inline_ref;

;; $TonkPumpFactory$_fun_get_contract_storage_fee
((int, int, slice, int, int, cell), int) $TonkPumpFactory$_fun_get_contract_storage_fee((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_forward
((int, int, slice, int, int, cell), ()) $TonkPumpFactory$_fun_forward((int, int, slice, int, int, cell) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $TonkPumpFactory$_fun_reply
((int, int, slice, int, int, cell), ()) $TonkPumpFactory$_fun_reply((int, int, slice, int, int, cell) $self, cell $body) impure inline;

;; $TonkPumpFactory$_fun_notify
((int, int, slice, int, int, cell), ()) $TonkPumpFactory$_fun_notify((int, int, slice, int, int, cell) $self, cell $body) impure inline;

;; $TonkPumpFactory$_fun_requireOwner
((int, int, slice, int, int, cell), ()) $TonkPumpFactory$_fun_requireOwner((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_owner
((int, int, slice, int, int, cell), slice) $TonkPumpFactory$_fun_owner((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_requireNotStopped
((int, int, slice, int, int, cell), ()) $TonkPumpFactory$_fun_requireNotStopped((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_requireStopped
((int, int, slice, int, int, cell), ()) $TonkPumpFactory$_fun_requireStopped((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $TonkPumpFactory$_fun_stopped
((int, int, slice, int, int, cell), int) $TonkPumpFactory$_fun_stopped((int, int, slice, int, int, cell) $self) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode(slice to, int value, int mode) inline;

;; $ChangeOwnerOk$_constructor_queryId_newOwner
((int, slice)) $ChangeOwnerOk$_constructor_queryId_newOwner(int queryId, slice newOwner) inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
