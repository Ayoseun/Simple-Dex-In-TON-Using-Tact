;;
;; Header files for TonkPumpAMM
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_verify_address
slice __tact_verify_address(slice address) inline;

;; __tact_load_address
(slice, slice) __tact_load_address(slice cs) inline;

;; __tact_store_address
builder __tact_store_address(builder b, slice address) inline;

;; __tact_create_address
slice __tact_create_address(int chain, int hash) inline;

;; __tact_compute_contract_address
slice __tact_compute_contract_address(int chain, cell code, cell data) inline;

;; __tact_my_balance
int __tact_my_balance() inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; __tact_store_bool
builder __tact_store_bool(builder b, int v) inline;

;; __tact_slice_eq_bits
int __tact_slice_eq_bits(slice a, slice b) inline;

;; __tact_dict_set_code
cell __tact_dict_set_code(cell dict, int id, cell code) inline;

;; __tact_dict_get_code
cell __tact_dict_get_code(cell dict, int id) inline;

;; $Deploy$_load
(slice, ((int))) $Deploy$_load(slice sc_0) inline;

;; $DeployOk$_store
builder $DeployOk$_store(builder build_0, (int) v) inline;

;; $DeployOk$_store_cell
cell $DeployOk$_store_cell((int) v) inline;

;; $Buy$_load
(slice, ((int, int))) $Buy$_load(slice sc_0) inline;

;; $DevMint$_load
(slice, ((slice, slice, slice))) $DevMint$_load(slice sc_0) inline;

;; $Mint$_store
builder $Mint$_store(builder build_0, (int, slice, int) v) inline;

;; $Mint$_store_cell
cell $Mint$_store_cell((int, slice, int) v) inline;

;; $TokenNotification$_load
(slice, ((int, int, slice, slice))) $TokenNotification$_load(slice sc_0) inline;

;; $TonkPumpAMM$_store
builder $TonkPumpAMM$_store(builder build_0, (slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) v) inline;

;; $TonkPumpAMM$_load
(slice, ((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int))) $TonkPumpAMM$_load(slice sc_0) inline;

;; $StateInit$_not_null
((cell, cell)) $StateInit$_not_null(tuple v) inline;

;; $Context$_get_sender
_ $Context$_get_sender((int, slice, int, slice) v) inline;

;; $Context$_get_value
_ $Context$_get_value((int, slice, int, slice) v) inline;

;; $TonkPumpDefaultWallet$init$_store
builder $TonkPumpDefaultWallet$init$_store(builder build_0, (slice, slice) v) inline;

;; $TonkPumpAMM$init$_load
(slice, ((int, slice, slice, slice, slice, int))) $TonkPumpAMM$init$_load(slice sc_0) inline_ref;

;; $TonkPumpAMM$_contract_init
(slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $TonkPumpAMM$_contract_init(int $_id, slice $_owner, slice $_dev, slice $_jettonAddress, slice $_ticker, int $v) impure inline_ref;

;; $TonkPumpAMM$_contract_load
(slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $TonkPumpAMM$_contract_load() impure inline_ref;

;; $TonkPumpAMM$_contract_store
() $TonkPumpAMM$_contract_store((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) v) impure inline;

;; $global_contractAddress
slice $global_contractAddress((cell, cell) $s) impure inline;

;; $global_send
() $global_send((int, slice, int, int, cell, cell, cell) $params) impure inline_ref;

;; $SendParameters$_constructor_bounce_to_value_mode_body_code_data
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int bounce, slice to, int value, int mode, cell body, cell code, cell data) inline;

;; $TonkPumpDefaultWallet$_init_child
(cell, cell) $TonkPumpDefaultWallet$_init_child(cell sys', slice $master, slice $owner) inline_ref;

;; $TonkPumpAMM$_fun_calculateCurrentPrice
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), int) $TonkPumpAMM$_fun_calculateCurrentPrice((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $SendParameters$_constructor_to_bounce_value_mode
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_bounce_value_mode(slice to, int bounce, int value, int mode) inline;

;; $TonkPumpAMM$_fun_sendTon
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), ()) $TonkPumpAMM$_fun_sendTon((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self, int $amount, slice $receiver) impure inline_ref;

;; $TonkPumpAMM$_fun_on_jetton_sell
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), ()) $TonkPumpAMM$_fun_on_jetton_sell((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self, slice $payload) impure inline_ref;

;; $SendParameters$_constructor_to_value_mode_bounce_body
((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_bounce_body(slice to, int value, int mode, int bounce, cell body) inline;

;; $Mint$_constructor_amount_receiver_minter
((int, slice, int)) $Mint$_constructor_amount_receiver_minter(int amount, slice receiver, int minter) inline;

;; $TonkPumpAMM$_fun_mintTokens
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), ()) $TonkPumpAMM$_fun_mintTokens((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self, int $amount, slice $receiver) impure inline_ref;

;; $TonkPumpAMM$_fun_ticker
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), slice) $TonkPumpAMM$_fun_ticker((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_ammAddress
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), slice) $TonkPumpAMM$_fun_ammAddress((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_jettonAddress
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), slice) $TonkPumpAMM$_fun_jettonAddress((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_jettonMaxSupply
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), int) $TonkPumpAMM$_fun_jettonMaxSupply((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_MarketCap
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), int) $TonkPumpAMM$_fun_MarketCap((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_jettonTotalSupply
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), int) $TonkPumpAMM$_fun_jettonTotalSupply((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_id
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), int) $TonkPumpAMM$_fun_id((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_tonBalance
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), int) $TonkPumpAMM$_fun_tonBalance((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_getJettonWalletInit
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), (cell, cell)) $TonkPumpAMM$_fun_getJettonWalletInit((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self, slice $address) impure inline_ref;

;; $TonkPumpAMM$_fun_ammJettonWalletAddress
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), slice) $TonkPumpAMM$_fun_ammJettonWalletAddress((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_priceFromSupply
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), int) $TonkPumpAMM$_fun_priceFromSupply((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self) impure inline_ref;

;; $TonkPumpAMM$_fun_forward
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), ()) $TonkPumpAMM$_fun_forward((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self, slice $to, cell $body, int $bounce, tuple $init) impure inline_ref;

;; $TonkPumpAMM$_fun_notify
((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int), ()) $TonkPumpAMM$_fun_notify((slice, slice, int, slice, int, int, int, int, int, int, int, int, slice, int) $self, cell $body) impure inline;

;; $DeployOk$_constructor_queryId
((int)) $DeployOk$_constructor_queryId(int queryId) inline;
